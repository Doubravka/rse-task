install.packages("reticulate")
install.packages("reticulate")
library(reticulate)
citation("reticulate")
library(devtools)
install_github("rstudio/reticulate")
citation("reticulate")
install.packages("reticulate")
install.packages("reticulate")
library(devtools)
citation("reticulate")
?setdiff
vargens<-c(1,2,3)
vargenes<-c(1,2,3)
cycle_genes<-c(3,4,5)
setdiff(vargenes,cycle_genes)
?setdiff
reticulate::py_install("tensorflow",pip=TRUE)
reticulate::py_config()
reticulate::install_python()
reticulate::install_python()
reticulate::install_python()
library(reticulate)
py_config()
use_python("/usr/local/bin/python3.9")
use_python("/Users/grigorij/miniforge3/bin/python3.9")
reticulate::py_install("tensorflow",pip=TRUE)
install.packages(DiagrammeR)
devtools::install_github("rich-iannone/DiagrammeR")
install.packages('tinytex')
tinytex::install_tinytex()
install.packages('tinytex')
tinytex::install_tinytex()
install.packages("tinytex")
setwd("~/")
rmarkdown::render("Untitled.Rmd", output_format = "pdf_document")
rmarkdown::render("Untitled.Rmd", output_format = "pdf_document")
install.packages("moviedo2")
devtools::install_github("moviedo5/fda.tsc")
library(fda.tsc)
data("ECG5000")
ECG200
ECG5000
?ECG5000
?|>
1 |> x
1 |> sin()
1 |> sin(_)
1 |> sin(x=_)
fda.tsc
library(ECG5000)
ECG5000
data(ECG5000)
??data(ECG5000)
??ECG5000
library(fda.tsc)
ECG200
ECG200$df
ECG5000$df
load("~/ownCloud/analyzy_cloud/switch10X/tv1_10X_holub_enricheddata_scaled_all.RDATA")
library(tviblindi)
launch_shiny(tv1)
launch_shiny(tv1)
head(tv1$layout$5_vaevictis)
head(tv1$layout$`5_vaevictis`)
load("~/ownCloud/analyzy_cloud/switch10X/tv1_10X_holub_enricheddata_scaled_all.RDATA")
launch_shiny(tv1)
devtools::install_github('stuchly/tviblindi')
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
devtools::install_github('stuchly/tviblindi')
library(tviblindi)
load("~/ownCloud/analyzy_cloud/switch10X/tv1_10X_holub_enricheddata_scaled_all.RDATA")
launch_shiny(tv1)
plot(tv1, layout_name =5, labels_name = 3)
plot(tv1, layout_name =5, labels_name = 2)
plot(tv1, layout_name =5, labels_name = 3)
plot(tv1, layout_name =5, labels_name = 1)
source("~/ownCloud/analyzy_cloud/switch10X/serv.R")
plot(tv1, layout_name =5, labels_name = 1)
plot(tv1, layout_name =5, labels_name = 1,pch=20)
library(tviblindi)
load("~/ownCloud/analyzy_cloud/switch10X/tv1_10X_holub_enricheddata_scaled_all.RDATA")
launch_shiny(tv1)
library(devtools)
install_github('saeyslab/CytoNorm')
helpl(package=CytoNorm)
help(package=CytoNorm)
q()
?cor.test()
q()
install.packages("deSolve")
source("~/.active-rstudio-document")
ggplot(out_df, aes(x = x2, y = y2)) +
geom_point(color = "blue", size = 0.5) +
geom_path(color = "blue", alpha = 0.5) +
ggtitle("Double Pendulum Motion") +
theme_minimal() +
xlab("X Position") +
ylab("Y Position") +
coord_fixed()
ggplot(out_df, aes(x = x2, y = y2)) +
geom_point(color = "blue", size = 0.5) +
geom_path(color = "blue", alpha = 0.5) +
ggtitle("Double Pendulum Motion") +
theme_minimal() +
xlab("X Position") +
ylab("Y Position") +
coord_fixed()
source("~/.active-rstudio-document")
install.packages("gganimate")
install.packages("gganimate")
install.packages("gganimate")
install.packages("gganimate")
install.packages("gganimate")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install_github('saeyslab/CytoNorm')
library(devtools)
install_github('saeyslab/CytoNorm')
devtools::install_github("kassambara/ggpubr")
source("~/.active-rstudio-document")
warnings()
cvs <- testCV(fsom,
cluster_values = c(5, 10, 15))
cvs$pctgs$`10`
source("~/.active-rstudio-document")
warnings()
library(CytoNorm)
library(flowCore)
library(FlowSOM)
library(ggpubr)
dir <- system.file("extdata", package = "CytoNorm")
files <- list.files(dir, pattern = "fcs$")
data <- data.frame(File = files,
Path = file.path(dir, files),
Type = stringr::str_match(files, "_([12]).fcs")[, 2],
Batch = stringr::str_match(files, "PTLG[0-9]*")[, 1],
stringsAsFactors = FALSE)
data$Type <- c("1" = "Train", "2" = "Validation")[data$Type]
train_data <- dplyr::filter(data, Type == "Train")
validation_data <- dplyr::filter(data, Type == "Validation")
ff <- flowCore::read.FCS(data$Path[1])
channels <- flowCore::colnames(ff)[c(48, 46, 43, 45, 20, 16, 21, 19, 22, 50, 47,
40, 44, 33, 17, 11, 18, 51, 14, 23, 32, 10,
49, 27, 24, 31, 42, 37, 39, 34, 41, 26, 30,
28, 29, 25, 35)]
transformList <- flowCore::transformList(channels,
cytofTransform)
transformList.reverse <- flowCore::transformList(channels,
cytofTransform.reverse)
fsom <- prepareFlowSOM(train_data$Path,
channels,
nCells = 6000,
FlowSOM.params = list(xdim = 5,
ydim = 5,
nClus = 10,
scale = FALSE),
transformList = transformList,
seed = 1)
cvs <- testCV(fsom,
cluster_values = c(5, 10, 15))
cvs$pctgs$`10`
model <- CytoNorm.train(files = train_data$Path,
labels = train_data$Batch,
channels = channels,
transformList = transformList,
FlowSOM.params = list(nCells = 6000,
xdim = 5,
ydim = 5,
nClus = 10,
scale = FALSE),
normMethod.train = QuantileNorm.train,
normParams = list(nQ = 101,
goal = "mean"),
seed = 1,
verbose = TRUE)
warnings()
CytoNorm.normalize(model = model,
files = validation_data$Path,
labels = validation_data$Batch,
transformList = transformList,
transformList.reverse = transformList.reverse,
normMethod.normalize = QuantileNorm.normalize,
outputDir = "Normalized",
prefix = "Norm_",
clean = TRUE,
verbose = TRUE)
source("~/.active-rstudio-document")
ggplot(data, aes(x = Concentration, y = Measurement, color = Condition)) +
geom_point(position = position_jitter(width = 0.1, height = 0), alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Measurements by Concentration and Condition",
x = "Concentration",
y = "Measurement") +
theme_minimal()
# Fit Linear Mixed-Effects Model
model <- lmer(Measurement ~ Concentration * Condition + (1 | Concentration), data = data)
# Summarize the model
summary(model)
# Calculate mean measurements per concentration and condition
mean_data <- data %>%
group_by(Concentration, Condition) %>%
summarise(Mean_Measurement = mean(Measurement)) %>%
pivot_wider(names_from = Condition, values_from = Mean_Measurement)
# Remove any concentrations missing in either condition
mean_data <- na.omit(mean_data)
# Calculate Spearman's correlation
spearman_corr <- cor(mean_data$Condition_A, mean_data$Condition_B, method = "spearman")
print(paste("Spearman's Correlation:", round(spearman_corr, 3)))
source("~/.active-rstudio-document")
# Generate all figures
plot_brachistochrone_comparison()
plot_arc_length()
plot_travel_time_comparison()
plot_cycloid()
plot_applications()
source("~/.active-rstudio-document")
# Example sequences
X <- unlist(strsplit("GATTACA", split=""))
Y <- unlist(strsplit("GCATGCU", split=""))
match_score <- 2
mismatch_penalty <- -1
gap_penalty <- -1
score <- function(a, b) ifelse(a == b, match_score, mismatch_penalty)
# 1. Standard Smith-Waterman (Past-reward)
m <- length(X); n <- length(Y)
H <- matrix(0, m+1, n+1)
for (i in 1:m){
for (j in 1:n){
H[i+1,j+1] <- max(
0,
H[i,j] + score(X[i],Y[j]),
H(i,j+1) <- H[i,j+1] - gap_penalty,
H(i+1,j) <- H[i+1,j] - gap_penalty
)
}
return(H)
}
H <- matrix(0, m+1, n+1)
# 1. Standard Smith-Waterman (Past-reward)
smith_waterman_forward <- function(X, Y){
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
library(tviblindi)
?launch_shiny
library(tviblindi)
load("~/ownCloud/tviblindi_present/tv1_Thymus2a_01_0_0_comp_II_nnls_G1_noRedDeadRedemption_multilab_7500_l3.RDATA")
launch_shiny(tv1)
launch_shiny(tv1)
setwd("~/analyzy-vsichni/rsehomework/data/raw")
library(flowCore)
fcs<-read.FCS("FR-FCM-Z3HK - TcellPanel - glioma - COH001 - Viable.fcs")
fcs
fcs@parameters@data
library(tviblindi)
fcstable("FR-FCM-Z3HK - TcellPanel - kidney - IPIKID-073 - Viable.fcs")
